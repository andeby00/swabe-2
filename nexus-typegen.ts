/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { ContextType } from "./src/types/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Login: { // root type
    id?: string | null; // ID
    name?: string | null; // String
    token?: string | null; // String
  }
  Mutation: {};
  Query: {};
  Reservation: { // root type
    end: number; // Int!
    id: string; // ID!
    start: number; // Int!
    token?: string | null; // String
  }
  Room: { // root type
    capacity: number; // Int!
    category: string; // String!
    minibar: boolean; // Boolean!
    roomNumber: number; // Int!
  }
  User: { // root type
    id: string; // ID!
    mail: string; // String!
    name: string; // String!
    role: string; // String!
    token?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Login: { // field return type
    id: string | null; // ID
    name: string | null; // String
    token: string | null; // String
  }
  Mutation: { // field return type
    createReservation: NexusGenRootTypes['Reservation'] | null; // Reservation
    createRoom: NexusGenRootTypes['Room'] | null; // Room
    deleteReservation: NexusGenRootTypes['Reservation'] | null; // Reservation
    deleteRoom: NexusGenRootTypes['Room'] | null; // Room
    updateReservation: NexusGenRootTypes['Reservation'] | null; // Reservation
    updateRoom: NexusGenRootTypes['Room'] | null; // Room
    userCreate: NexusGenRootTypes['Login']; // Login!
    userLogin: NexusGenRootTypes['Login']; // Login!
  }
  Query: { // field return type
    reservation: NexusGenRootTypes['Reservation'] | null; // Reservation
    reservations: NexusGenRootTypes['Room'][]; // [Room!]!
    room: NexusGenRootTypes['Room'] | null; // Room
    rooms: NexusGenRootTypes['Room'][]; // [Room!]!
    user: NexusGenRootTypes['User'] | null; // User
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Reservation: { // field return type
    end: number; // Int!
    id: string; // ID!
    room: NexusGenRootTypes['Room'] | null; // Room
    start: number; // Int!
    token: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  Room: { // field return type
    capacity: number; // Int!
    category: string; // String!
    minibar: boolean; // Boolean!
    roomNumber: number; // Int!
  }
  User: { // field return type
    id: string; // ID!
    mail: string; // String!
    name: string; // String!
    role: string; // String!
    token: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Login: { // field return type name
    id: 'ID'
    name: 'String'
    token: 'String'
  }
  Mutation: { // field return type name
    createReservation: 'Reservation'
    createRoom: 'Room'
    deleteReservation: 'Reservation'
    deleteRoom: 'Room'
    updateReservation: 'Reservation'
    updateRoom: 'Room'
    userCreate: 'Login'
    userLogin: 'Login'
  }
  Query: { // field return type name
    reservation: 'Reservation'
    reservations: 'Room'
    room: 'Room'
    rooms: 'Room'
    user: 'User'
    users: 'User'
  }
  Reservation: { // field return type name
    end: 'Int'
    id: 'ID'
    room: 'Room'
    start: 'Int'
    token: 'String'
    user: 'User'
  }
  Room: { // field return type name
    capacity: 'Int'
    category: 'String'
    minibar: 'Boolean'
    roomNumber: 'Int'
  }
  User: { // field return type name
    id: 'ID'
    mail: 'String'
    name: 'String'
    role: 'String'
    token: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createReservation: { // args
      end: number; // Int!
      roomNumber: number; // Int!
      start: number; // Int!
      userId: string; // String!
    }
    createRoom: { // args
      capacity: number; // Int!
      category: string; // String!
      minibar: boolean; // Boolean!
      roomNumber: number; // Int!
    }
    deleteReservation: { // args
      uid: string; // String!
    }
    deleteRoom: { // args
      roomNumber: number; // Int!
    }
    updateReservation: { // args
      end: number; // Int!
      roomNumber: number; // Int!
      start: number; // Int!
      uid: string; // String!
      userId: string; // String!
    }
    updateRoom: { // args
      capacity: number; // Int!
      category: string; // String!
      minibar: boolean; // Boolean!
      roomNumber: number; // Int!
    }
    userCreate: { // args
      mail: string; // String!
      name: string; // String!
      password: string; // String!
      role: string; // String!
    }
    userLogin: { // args
      mail: string; // String!
      password: string; // String!
    }
  }
  Query: {
    reservation: { // args
      uid: string; // String!
    }
    reservations: { // args
      from?: number | null; // Int
      to?: number | null; // Int
    }
    room: { // args
      roomNumber: number; // Int!
    }
    rooms: { // args
      date: number; // Int!
    }
    user: { // args
      uid: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: ContextType;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}